
struct Bid {
  PubKey furnisherKey;
  bytes plans;
  int bidAmount;
  int bond;
  int timeOfBid;
  int timeRequired;
}

contract EscrowContract {
  @state int minAllowableBid;
  @state int escrowServiceFeeBasisPoints;
  @state int platformAuthorizationRequired;
  @state int escrowMustBeFullyDecisive;
  @state int bountySolversNeedApproval;
  @state int furnisherBondingMode;
  @state int requiredBondAmount;
  @state int maxWorkStartDelay;
  @state int maxWorkApprovalDelay;
  @state int delayUnit;
  @state int workCompletionDeadline;
  @state int approvalMode;
  @state int contractType;
  @state int contractSurvivesAdverseFurnisherDisputeResolution;
  @state int bountyIncreaseAllowanceMode;
  @state int bountyIncreaseCutoffPoint;
  @state Bid[4] bids;
  @state PubKey seekerKey;
  @state PubKey platformKey;
  @state Bid acceptedBid;
  @state int bidAcceptedBy;
  @state int workCompletionTime;
  @state int status;
  @state bytes workDescription;
  @state bytes workCompletionDescription;
  bytes __scrypt_ts_ctx_hashoutputs;
  int __scrypt_ts_ctx_locktime;
  int __scrypt_ts_ctx_sequence;
  int __scrypt_ts_ctx_value;
  constructor(PubKey seekerKey, PubKey platformKey, int escrowServiceFeeBasisPoints, int platformAuthorizationRequired, bytes workDescription, int workCompletionDeadline, int minAllowableBid, int bountySolversNeedApproval, int escrowMustBeFullyDecisive, int furnisherBondingMode, int requiredBondAmount, int maxWorkStartDelay, int maxWorkApprovalDelay, int delayUnit, int approvalMode, int bountyIncreaseAllowanceMode, int bountyIncreaseCutoffPoint, int contractType, int contractSurvivesAdverseFurnisherDisputeResolution, Bid[4] bids) {
    this.seekerKey = seekerKey;
    this.platformKey = platformKey;
    this.escrowServiceFeeBasisPoints = escrowServiceFeeBasisPoints;
    this.platformAuthorizationRequired = platformAuthorizationRequired;
    this.workDescription = workDescription;
    this.workCompletionDeadline = workCompletionDeadline;
    this.minAllowableBid = minAllowableBid;
    this.bountySolversNeedApproval = bountySolversNeedApproval;
    this.escrowMustBeFullyDecisive = escrowMustBeFullyDecisive;
    this.furnisherBondingMode = furnisherBondingMode;
    this.requiredBondAmount = requiredBondAmount;
    this.maxWorkStartDelay = maxWorkStartDelay;
    this.maxWorkApprovalDelay = maxWorkApprovalDelay;
    this.delayUnit = delayUnit;
    this.approvalMode = approvalMode;
    this.contractType = contractType;
    this.contractSurvivesAdverseFurnisherDisputeResolution = contractSurvivesAdverseFurnisherDisputeResolution;
    this.bountyIncreaseAllowanceMode = bountyIncreaseAllowanceMode;
    this.bountyIncreaseCutoffPoint = bountyIncreaseCutoffPoint;
    this.status = 11;
    this.bids = bids;
    this.bidAcceptedBy = 81;
    this.acceptedBid = {seekerKey, b'', 0, 0, 0, 0};
    this.workCompletionTime = 0;
    this.workCompletionDescription = b'';
  }
  public function seekerCancelsBeforeAcceptOnChain(Sig seekerSig, SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_locktime = SigHash.nLocktime(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_sequence = SigHash.nSequence(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    require(this.status == 11);
    require(checkSig(seekerSig, this.seekerKey));
  }
  public function increaseBountyOnChain(int mode, int amount, Sig sig, SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'c3')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_locktime = SigHash.nLocktime(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_sequence = SigHash.nSequence(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    require(amount > 0);
    require(this.contractType == 1);
    require(this.bountyIncreaseAllowanceMode != 61);
    if(this.bountyIncreaseAllowanceMode == 64) {
        require(mode == 63 || mode == 62);
      } else {
        require(mode == this.bountyIncreaseAllowanceMode);
      }
    if(this.bountyIncreaseCutoffPoint == 71) {
        require(this.status == 11);
      } else if(this.bountyIncreaseCutoffPoint == 72) {
        require(this.status == 11 || this.status == 12);
      } else if(this.bountyIncreaseCutoffPoint == 73) {
        require(this.status == 11 || this.status == 12 || this.status == 13);
      } else if(this.bountyIncreaseCutoffPoint == 74) {
        require(this.status == 11 || this.status == 12 || this.status == 13 || this.status == 14);
      }
    if(mode == 62) {
        require(checkSig(sig, this.seekerKey));
      } else if(mode == 63) {
        require(checkSig(sig, this.platformKey));
      }
    require(this.__scrypt_ts_ctx_hashoutputs == hash256(this.buildStateOutput(this.__scrypt_ts_ctx_value + amount)));
  }
  public function seekerExtendsWorkDeadlineOnChain(Sig seekerSig, int extension, SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'c3')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_locktime = SigHash.nLocktime(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_sequence = SigHash.nSequence(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    require(extension > 0);
    if(this.delayUnit == 51) {
        require(this.workCompletionDeadline + extension < 500000000);
      } else {
        require(this.workCompletionDeadline + extension > 500000000);
      }
    require(this.status == 11 || this.status == 12 || this.status == 13);
    this.workCompletionDeadline += extension;
    require(checkSig(seekerSig, this.seekerKey));
    require(this.__scrypt_ts_ctx_hashoutputs == hash256(this.buildStateOutput(this.__scrypt_ts_ctx_value)));
  }
  function seekerExtendsWorkDeadline(Sig seekerSig, int extension) : bool {
    this.workCompletionDeadline += extension;
    return true;
  }
  public function furnisherPlacesBidOnChain(Sig furnisherSig, Bid bid, int index, SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'c3')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_locktime = SigHash.nLocktime(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_sequence = SigHash.nSequence(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    require(this.status == 11);
    require(this.bountySolversNeedApproval == 1);
    require(checkSig(furnisherSig, bid.furnisherKey));
    if(this.contractType == 1) {
        require(bid.bidAmount == this.__scrypt_ts_ctx_value);
      } else {
        require(bid.bidAmount >= this.minAllowableBid);
      }
    if(this.furnisherBondingMode == 31) {
        require(bid.bond == 0);
      } else if(this.furnisherBondingMode == 32) {
        require(bid.bond >= 0);
      } else {
        require(bid.bond == this.requiredBondAmount);
        require(bid.bond >= 0);
      }
    if(this.contractType == 2) {
        require(this.__scrypt_ts_ctx_value == 1);
      }
    require(bid.timeRequired > 0);
    require(bid.timeOfBid > 0);
    if(this.delayUnit == 51) {
        require(bid.timeRequired < 500000000);
        require(bid.timeOfBid < 500000000);
      } else {
        require(bid.timeRequired > 500000000);
        require(bid.timeOfBid > 500000000);
      }
    this.enforceProperTimeUnits();
    require(this.__scrypt_ts_ctx_locktime >= bid.timeOfBid);
    require(this.bids[(index)].furnisherKey == this.seekerKey);
    this.bids[(index)] = bid;
    require(this.__scrypt_ts_ctx_hashoutputs == hash256(this.buildStateOutput(this.__scrypt_ts_ctx_value)));
  }
  function furnisherPlacesBid(Sig furnisherSig, Bid bid, int index) : bool {
    this.bids[(index)] = bid;
    return true;
  }
  public function acceptBidOnChain(int mode, Sig sig, int index, SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'c3')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_locktime = SigHash.nLocktime(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_sequence = SigHash.nSequence(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    Bid bid = this.bids[(index)];
    require(this.status == 11);
    require(this.bountySolversNeedApproval == 1);
    if(this.approvalMode == 42) {
        require(mode == 41 || mode == 43);
      } else {
        require(mode == this.approvalMode);
      }
    if(mode == 41) {
        require(checkSig(sig, this.seekerKey));
        this.bidAcceptedBy = 82;
      } else {
        require(checkSig(sig, this.platformKey));
        this.bidAcceptedBy = 83;
      }
    require(this.__scrypt_ts_ctx_sequence == 0xfffffffe);
    require(this.__scrypt_ts_ctx_locktime < this.workCompletionDeadline - bid.timeRequired);
    this.status = 12;
    this.acceptedBid = bid;
    if(this.contractType == 2) {
        require(this.__scrypt_ts_ctx_hashoutputs == hash256(this.buildStateOutput(bid.bidAmount)));
      } else {
        require(this.__scrypt_ts_ctx_hashoutputs == hash256(this.buildStateOutput(this.__scrypt_ts_ctx_value)));
      }
    require(true);
  }
  function acceptBid(int mode, Sig sig, int index) : bool {
    Bid bid = this.bids[(index)];
    if(mode == 41) {
        this.bidAcceptedBy = 82;
      } else {
        this.bidAcceptedBy = 83;
      }
    this.status = 12;
    this.acceptedBid = bid;
    return true;
  }
  public function withdrawBidAcceptanceOnChain(Sig sig, int index, SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'c3')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_locktime = SigHash.nLocktime(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_sequence = SigHash.nSequence(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    require(this.status == 12);
    if(this.bidAcceptedBy == 82) {
        require(checkSig(sig, this.seekerKey));
      } else {
        require(checkSig(sig, this.platformKey));
      }
    if(this.delayUnit == 51) {
        require((this.acceptedBid).timeOfBid + this.maxWorkStartDelay < 500000000);
      } else {
        require((this.acceptedBid).timeOfBid + this.maxWorkStartDelay > 500000000);
      }
    this.enforceProperTimeUnits();
    require(this.__scrypt_ts_ctx_locktime > (this.acceptedBid).timeOfBid + this.maxWorkStartDelay);
    require(this.bids[(index)] == this.acceptedBid);
    this.status = 11;
    this.acceptedBid = {this.seekerKey, b'', 0, 0, 0, 0};
    this.bids[(index)] = {this.seekerKey, b'', 0, 0, 0, 0};
    this.bidAcceptedBy = 81;
    if(this.contractType == 2) {
        require(this.__scrypt_ts_ctx_hashoutputs == hash256(this.buildStateOutput(1)));
      } else {
        require(this.__scrypt_ts_ctx_hashoutputs == hash256(this.buildStateOutput(this.__scrypt_ts_ctx_value)));
      }
    require(true);
  }
  function withdrawBidAcceptance(Sig sig, int index) : bool {
    this.status = 11;
    this.acceptedBid = {this.seekerKey, b'', 0, 0, 0, 0};
    this.bids[(index)] = {this.seekerKey, b'', 0, 0, 0, 0};
    this.bidAcceptedBy = 81;
    return true;
  }
  public function rejectBidOnChain(int mode, Sig sig, int index, SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'c3')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_locktime = SigHash.nLocktime(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_sequence = SigHash.nSequence(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    require(this.status == 11);
    if(this.approvalMode == 42) {
        require(mode == 41 || mode == 43);
      } else {
        require(mode == this.approvalMode);
      }
    if(mode == 41) {
        require(checkSig(sig, this.seekerKey));
      } else {
        require(checkSig(sig, this.platformKey));
      }
    this.bids[(index)] = {this.seekerKey, b'', 0, 0, 0, 0};
    require(this.__scrypt_ts_ctx_hashoutputs == hash256(this.buildStateOutput(this.__scrypt_ts_ctx_value)));
  }
  function rejectBid(int mode, Sig sig, int index) : bool {
    this.bids[(index)] = {this.seekerKey, b'', 0, 0, 0, 0};
    return true;
  }
  public function furnisherStartsWorkOnChain(Sig furnisherSig, SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'c3')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_locktime = SigHash.nLocktime(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_sequence = SigHash.nSequence(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    require(this.status == 12);
    require(this.platformAuthorizationRequired == 0);
    require(this.bountySolversNeedApproval == 1);
    require(checkSig(furnisherSig, (this.acceptedBid).furnisherKey));
    this.status = 13;
    require(this.__scrypt_ts_ctx_hashoutputs == hash256(this.buildStateOutput(this.__scrypt_ts_ctx_value + (this.acceptedBid).bond)));
  }
  function furnisherStartsWork(Sig furnisherSig) : bool {
    this.status = 13;
    return true;
  }
  public function furnisherStartsWorkWithPlatformAuthorizationOnChain(Sig furnisherSig, Sig platformSig, SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'c3')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_locktime = SigHash.nLocktime(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_sequence = SigHash.nSequence(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    require(this.status == 12);
    require(this.platformAuthorizationRequired == 1);
    require(this.bountySolversNeedApproval == 1);
    require(checkSig(furnisherSig, (this.acceptedBid).furnisherKey));
    require(checkSig(platformSig, this.platformKey));
    this.status = 13;
    require(this.__scrypt_ts_ctx_hashoutputs == hash256(this.buildStateOutput(this.__scrypt_ts_ctx_value + (this.acceptedBid).bond)));
  }
  function furnisherStartsWorkWithPlatformAuthorization(Sig furnisherSig, Sig platformSig) : bool {
    this.status = 13;
    return true;
  }
  public function seekerRaisesDisputeOnChain(Sig seekerSig, SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'c3')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_locktime = SigHash.nLocktime(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_sequence = SigHash.nSequence(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    require(checkSig(seekerSig, this.seekerKey));
    require(this.status == 13 || this.status == 14);
    if(this.status == 13) {
        this.enforceProperTimeUnits();
        require(this.__scrypt_ts_ctx_locktime > this.workCompletionDeadline);
      }
    this.status = 16;
    require(this.__scrypt_ts_ctx_hashoutputs == hash256(this.buildStateOutput(this.__scrypt_ts_ctx_value)));
  }
  function seekerRaisesDispute(Sig seekerSig) : bool {
    this.status = 16;
    return true;
  }
  public function furnisherRaisesDisputeOnChain(Sig furnisherSig, SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'c3')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_locktime = SigHash.nLocktime(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_sequence = SigHash.nSequence(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    require(checkSig(furnisherSig, (this.acceptedBid).furnisherKey));
    require(this.status == 14);
    this.enforceProperTimeUnits();
    require(this.__scrypt_ts_ctx_locktime > (this.workCompletionTime) + this.maxWorkApprovalDelay);
    this.status = 17;
    require(this.__scrypt_ts_ctx_hashoutputs == hash256(this.buildStateOutput(this.__scrypt_ts_ctx_value)));
  }
  function furnisherRaisesDispute(Sig furnisherSig) : bool {
    this.status = 17;
    return true;
  }
  public function furnisherSubmitsWorkOnChain(Sig furnisherSig, bytes workCompletionDescription, Bid adHocBid, SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'c3')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_locktime = SigHash.nLocktime(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_sequence = SigHash.nSequence(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    this.enforceProperTimeUnits();
    this.workCompletionTime = this.__scrypt_ts_ctx_locktime;
    this.workCompletionDescription = workCompletionDescription;
    if(this.contractType == 1 && this.bountySolversNeedApproval == 0) {
        require(this.status == 11);
        this.status = 14;
        require(checkSig(furnisherSig, adHocBid.furnisherKey));
        require(adHocBid.bidAmount == this.__scrypt_ts_ctx_value);
        require(adHocBid.timeOfBid == this.__scrypt_ts_ctx_locktime);
        require(adHocBid.bond == this.requiredBondAmount);
        require(adHocBid.timeRequired == 0);
        this.acceptedBid = adHocBid;
        require(this.__scrypt_ts_ctx_hashoutputs == hash256(this.buildStateOutput(this.__scrypt_ts_ctx_value + this.requiredBondAmount)));
      } else {
        require(this.status == 13);
        this.status = 14;
        require(checkSig(furnisherSig, (this.acceptedBid).furnisherKey));
        require(this.__scrypt_ts_ctx_locktime > (this.acceptedBid).timeOfBid);
        require(this.__scrypt_ts_ctx_hashoutputs == hash256(this.buildStateOutput(this.__scrypt_ts_ctx_value)));
      }
    require(true);
  }
  function furnisherSubmitsWork(Sig furnisherSig, bytes workCompletionDescription, Bid adHocBid) : bool {
    this.workCompletionTime = this.__scrypt_ts_ctx_locktime;
    this.workCompletionDescription = workCompletionDescription;
    if(this.contractType == 1 && this.bountySolversNeedApproval == 0) {
        this.status = 14;
        this.acceptedBid = adHocBid;
      } else {
        this.status = 14;
      }
    return true;
  }
  public function seekerApprovesWorkOnChain(Sig seekerSig, SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'c3')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_locktime = SigHash.nLocktime(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_sequence = SigHash.nSequence(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    require(this.status == 14);
    require(checkSig(seekerSig, this.seekerKey));
    this.status = 15;
    require(this.__scrypt_ts_ctx_hashoutputs == hash256(this.buildStateOutput(this.__scrypt_ts_ctx_value)));
  }
  function seekerApprovesWork(Sig seekerSig) : bool {
    this.status = 15;
    return true;
  }
  public function furnisherClaimsPaymentOnChain(Sig furnisherSig, SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_locktime = SigHash.nLocktime(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_sequence = SigHash.nSequence(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    require(this.status == 15);
    require(checkSig(furnisherSig, (this.acceptedBid).furnisherKey));
  }
  public function resolveDisputeOnChain(int platformResolves, int amountForSeeker, int amountForFurnisher, bytes otherOutputs, Sig platformSig, Sig seekerSig, Sig furnisherSig, SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'c1')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_locktime = SigHash.nLocktime(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_sequence = SigHash.nSequence(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    require(this.status == 17 || this.status == 16);
    require(amountForSeeker >= 0);
    require(amountForFurnisher >= 0);
    if(platformResolves == 1) {
        require(checkSig(platformSig, this.platformKey));
        if(this.escrowMustBeFullyDecisive == 1) {
          require(amountForSeeker == 0 || amountForFurnisher == 0);
        }
        require(amountForSeeker + amountForFurnisher >= this.__scrypt_ts_ctx_value - (this.__scrypt_ts_ctx_value * this.escrowServiceFeeBasisPoints) / 10000);
      } else {
        require(checkSig(seekerSig, this.seekerKey));
        require(checkSig(furnisherSig, this.acceptedBid.furnisherKey));
        require(amountForSeeker + amountForFurnisher >= this.__scrypt_ts_ctx_value);
      }
    if(amountForSeeker > 0 && amountForFurnisher == 0) {
        if(this.contractSurvivesAdverseFurnisherDisputeResolution == 1) {
          require(this.__scrypt_ts_ctx_hashoutputs == hash256(this.buildStateOutput(amountForSeeker) + otherOutputs));
        } else {
          require(this.__scrypt_ts_ctx_hashoutputs == hash256(Utils.buildOutput(Utils.buildPublicKeyHashScript(hash160(this.seekerKey)), amountForSeeker) + otherOutputs));
        }
      } else if(amountForSeeker == 0 && amountForFurnisher > 0) {
        require(this.__scrypt_ts_ctx_hashoutputs == hash256(Utils.buildOutput(Utils.buildPublicKeyHashScript(hash160((this.acceptedBid).furnisherKey)), amountForFurnisher) + otherOutputs));
      } else {
        require(this.__scrypt_ts_ctx_hashoutputs == hash256(Utils.buildOutput(Utils.buildPublicKeyHashScript(hash160(this.seekerKey)), amountForSeeker) + Utils.buildOutput(Utils.buildPublicKeyHashScript(hash160((this.acceptedBid).furnisherKey)), amountForFurnisher) + otherOutputs));
      }
    require(true);
  }
  private function enforceProperTimeUnits() : bool {
    require(this.__scrypt_ts_ctx_sequence == 0xfffffffe);
    if(this.delayUnit == 51) {
        require(this.__scrypt_ts_ctx_locktime < 500000000);
      } else {
        require(this.__scrypt_ts_ctx_locktime > 500000000);
      }
    return true;
  }
  function buildStateOutput(int amount) : bytes {  return Utils.buildOutput(this.getStateScript(), amount);}
}